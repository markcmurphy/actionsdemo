const { WordPattern } = require("./wordPattern");
patterns = [
  new WordPattern("should", {
    suggestion: "use 'must' or remove",
    skipForUseCases: true,
  }),
  new WordPattern("could", { suggestion: "-", skipForUseCases: true }),
  new WordPattern("would", {
    suggestion: "use present tense",
    skipForUseCases: true,
  }),
  new WordPattern("may", {
    suggestion: "'can'",
    caseSensitive: true,
    skipForUseCases: true,
  }),
  new WordPattern("will", {
    suggestion: "use present tense",
    skipForUseCases: true,
  }),
  new WordPattern("was", {
    suggestion: "use present tense",
    skipForUseCases: true,
  }),
  new WordPattern("were", {
    suggestion: "use present tense",
    skipForUseCases: true,
  }),
  new WordPattern("had", {
    suggestion: "use present tense",
    skipForUseCases: true,
  }),
  new WordPattern("did", {
    suggestion: "use present tense",
    skipForUseCases: true,
  }),
  new WordPattern("wasn't", {
    suggestion: "use present tense",
    skipForUseCases: true,
  }),
  new WordPattern("weren't", {
    suggestion: "use present tense",
    skipForUseCases: true,
  }),
  new WordPattern("hadn't", {
    suggestion: "use present tense",
    skipForUseCases: true,
  }),
  new WordPattern("didn't", {
    suggestion: "use present tense",
    skipForUseCases: true,
  }),
  new WordPattern("abort ", { suggestion: "'stop', 'cancel'" }),
  new WordPattern("kill", { suggestion: "'stop', 'cancel'" }),
  new WordPattern("terminate", { suggestion: "'stop', 'cancel'" }),
  new WordPattern("admin", {
    suggestion: "'administrator'",
    caseSensitive: true,
  }),
  new WordPattern("so(?!-)", { suggestion: "use formal style" }),
  new WordPattern("a lot", { suggestion: "use formal style" }),
  new WordPattern("actually", { suggestion: "use formal style" }),
  new WordPattern("as is", { suggestion: "remove" }),
  new WordPattern("deselect", { suggestion: "'clear'" }),
  new WordPattern("uncheck", { suggestion: "'clear'" }),
  new WordPattern("flag", {
    suggestion: "'option', 'setting'",
    skipForUseCases: true,
  }),
  new WordPattern("ingest", { suggestion: "'load', 'import'" }),
  new WordPattern("lets", { suggestion: "-" }),
  new WordPattern("let(?!'s enc)", { suggestion: "-" }), // Match "let", but not "Let's Encrypt".
  new WordPattern("please", { suggestion: "-" }),
  new WordPattern("regex ", { suggestion: "'regular expression'" }),
  new WordPattern("dropdown", { suggestion: "'drop-down'" }),
  new WordPattern("terminal ", { suggestion: "'console'" }),
  new WordPattern("Epoch time", { suggestion: "Unix time" }),
  new WordPattern("datacenter", { suggestion: "data center" }),
  new WordPattern("and/or", { suggestion: "clarify the meaning" }),
  new WordPattern("in order to", { suggestion: "'to'" }),
  new WordPattern("make sure", { suggestion: "'ensure'" }),
  new WordPattern("end-point", { suggestion: "'endpoint'" }),
  new WordPattern("click on", { suggestion: "'click'" }),
  new WordPattern("robust", { suggestion: "avoid trite words" }),
  new WordPattern("i\\.e\\.", { suggestion: "'for example'" }),
  new WordPattern("e\\.g\\.", { suggestion: "'for example'" }),
  new WordPattern("don't", { suggestion: "'do not'", skipForUseCases: true }),
  new WordPattern("doesn't", {
    suggestion: "'does not'",
    skipForUseCases: true,
  }),
  new WordPattern("can't", { suggestion: "'cannot'", skipForUseCases: true }),
  new WordPattern("hasn't", { suggestion: "'has not'", skipForUseCases: true }),
  new WordPattern("isn't", { suggestion: "'is not'", skipForUseCases: true }),
  new WordPattern("\\w+s's?", {
    suggestion: "do not use possessives",
    caseSensitive: false,
    noWordBoundary: true,
    skipForUseCases: true,
  }),
  new WordPattern("execute these steps", { suggestion: "avoid verbiage" }),
  new WordPattern("follow the prompts", { suggestion: "avoid verbiage" }),
  new WordPattern("perform these tasks", { suggestion: "avoid verbiage" }),
  new WordPattern("the following command", { suggestion: "avoid verbiage" }),
  new WordPattern("the following step", { suggestion: "avoid verbiage" }),
  new WordPattern("execute the following", { suggestion: "avoid verbiage" }),
  new WordPattern("login into", { suggestion: "'log in to'" }),
  new WordPattern("log in into", { suggestion: "'log in to'" }),
  new WordPattern("atsd_host", { suggestion: "`atsd_hostname`" }),
  new WordPattern("rodionos", { suggestion: "-" }),
  new WordPattern("raipc", { suggestion: "-'" }),
  new WordPattern("alexandertokarev", { suggestion: "-" }),
  new WordPattern("annstriganova", { suggestion: "-" }),
  new WordPattern("kghamilton89", { suggestion: "-" }),
  new WordPattern("kirmanak", { suggestion: "-" }),
  new WordPattern("MikhailZvagelsky", { suggestion: "-" }),
  new WordPattern("VeselovAlex", { suggestion: "-" }),
  new WordPattern("unrealwork", { suggestion: "-" }),
  new WordPattern("nur.axibase", { suggestion: "review white list" }),
  new WordPattern("hbs.axibase", { suggestion: "review white list" }),
  new WordPattern("myuser", { suggestion: "review white list" }),
  new WordPattern("mypassword", { suggestion: "review white list" }),
  new WordPattern("multi-action button", { suggestion: "'split-button'" }),
  new WordPattern("drop-down button", { suggestion: "'split-button'" }),
  new WordPattern("combo-button", { suggestion: "'split-button'" }),
  new WordPattern("split button", { suggestion: "'split-button'" }),
  new WordPattern("check box", { suggestion: "'checkbox'" }),
  new WordPattern("drop-down menu", { suggestion: "'drop-down list'" }),
  new WordPattern("selector", {
    suggestion: "'switch','drop-down list' or 'dual list'",
  }),
  new WordPattern("desired", { suggestion: "non-technical word" }),
  new WordPattern("maximal", { suggestion: "replace with 'maximum'" }),
  new WordPattern("in terms of", { suggestion: "too verbose" }),
  new WordPattern("bigcommerce", {
    suggestion: "BigCommerce",
    caseSensitive: true,
  }),
  new WordPattern("go to", { suggestion: "Use 'Open' or 'Navigate to'" }),
];

module.exports = patterns;
